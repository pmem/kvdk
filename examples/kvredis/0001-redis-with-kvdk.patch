From 9797999f3bea2486450104008fc2d7e40e811092 Mon Sep 17 00:00:00 2001
From: zhichenj <zhichen.jiang@intel.com>
Date: Fri, 10 Dec 2021 20:54:00 +0800
Subject: [PATCH] redis with kvdk

Signed-off-by: zhichenj <zhichen.jiang@intel.com>
---
 redis.conf            |  15 +-
 src/Makefile          |   7 +
 src/modules/Makefile  |   7 +-
 src/modules/kvdk.c    | 502 ++++++++++++++++++++++++++++++++++++++++++
 src/networking.c      |   3 +
 src/redis-benchmark.c |  18 +-
 6 files changed, 535 insertions(+), 17 deletions(-)
 create mode 100644 src/modules/kvdk.c

diff --git a/redis.conf b/redis.conf
index e8eff2774..4ab28babe 100644
--- a/redis.conf
+++ b/redis.conf
@@ -40,7 +40,7 @@
 # Load modules at startup. If the server is not able to load modules
 # it will abort. It is possible to use multiple loadmodule directives.
 #
-# loadmodule /path/to/my_module.so
+loadmodule src/modules/kvdk.so pmem_file_size 128*1024*1024*1024 engine_path /mnt/pmem0/redis_kvdk max_write_threads 8
 # loadmodule /path/to/other_module.so
 
 ################################## NETWORK #####################################
@@ -72,7 +72,8 @@
 # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
 # JUST COMMENT OUT THE FOLLOWING LINE.
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-bind 127.0.0.1 -::1
+# bind 127.0.0.1 -::1
+bind 192.168.1.3
 
 # Protected mode is a layer of security protection, in order to avoid that
 # Redis instances left open on the internet are accessed and exploited.
@@ -91,11 +92,11 @@ bind 127.0.0.1 -::1
 # you are sure you want clients from other hosts to connect to Redis
 # even if no authentication is configured, nor a specific set of interfaces
 # are explicitly listed using the "bind" directive.
-protected-mode yes
+protected-mode no
 
 # Accept connections on the specified port, default is 6379 (IANA #815344).
 # If port 0 is specified Redis will not listen on a TCP socket.
-port 6379
+port 6380
 
 # TCP listen() backlog.
 #
@@ -369,7 +370,7 @@ proc-title-template "{title} {listen-addr} {server-mode}"
 # Snapshotting can be completely disabled with a single empty string argument
 # as in following example:
 #
-# save ""
+save ""
 #
 # Unless specified otherwise, by default Redis will save the DB:
 #   * After 3600 seconds (an hour) if at least 1 key changed
@@ -1163,7 +1164,7 @@ lazyfree-lazy-user-flush no
 # threads, if you have a 8 cores, try to use 6 threads. In order to
 # enable I/O threads use the following configuration directive:
 #
-# io-threads 4
+io-threads 8
 #
 # Setting io-threads to 1 will just use the main thread as usual.
 # When I/O threads are enabled, we only use threads for writes, that is
@@ -1172,7 +1173,7 @@ lazyfree-lazy-user-flush no
 # protocol parsing using the following configuration directive, by setting
 # it to yes:
 #
-# io-threads-do-reads no
+io-threads-do-reads yes
 #
 # Usually threading reads doesn't help much.
 #
diff --git a/src/Makefile b/src/Makefile
index 1001f5b39..2ad60d561 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -224,6 +224,13 @@ ifeq ($(BUILD_WITH_SYSTEMD),yes)
 	FINAL_CFLAGS+= -DHAVE_LIBSYSTEMD
 endif
 
+# Intel KVDK
+ifeq ($(USE_KVDK),yes)
+    DEPENDENCY_TARGETS+= kvdk
+	FINAL_CFLAGS+= -DUSE_KVDK -I../deps/kvdk/include
+	FINAL_LIBS := ../deps/kvdk/libengine.so $(FINAL_LIBS)
+endif
+
 ifeq ($(MALLOC),tcmalloc)
 	FINAL_CFLAGS+= -DUSE_TCMALLOC
 	FINAL_LIBS+= -ltcmalloc
diff --git a/src/modules/Makefile b/src/modules/Makefile
index 3db19e79a..c94886335 100644
--- a/src/modules/Makefile
+++ b/src/modules/Makefile
@@ -13,11 +13,16 @@ endif
 
 .SUFFIXES: .c .so .xo .o
 
-all: helloworld.so hellotype.so helloblock.so hellocluster.so hellotimer.so hellodict.so hellohook.so helloacl.so
+all: helloworld.so hellotype.so helloblock.so hellocluster.so hellotimer.so hellodict.so hellohook.so helloacl.so kvdk.so
 
 .c.xo:
 	$(CC) -I. $(CFLAGS) $(SHOBJ_CFLAGS) -fPIC -c $< -o $@
 
+kvdk.xo: ../redismodule.h 
+
+kvdk.so: kvdk.xo
+	$(LD) -I ../../deps/kvdk/include -L../../deps/kvdk/ -o $@ $< $(SHOBJ_LDFLAGS) $(LIBS) -lc -lengine
+
 helloworld.xo: ../redismodule.h
 
 helloworld.so: helloworld.xo
diff --git a/src/modules/kvdk.c b/src/modules/kvdk.c
new file mode 100644
index 000000000..28ae060ed
--- /dev/null
+++ b/src/modules/kvdk.c
@@ -0,0 +1,502 @@
+/* KVDK module -- A few examples of the Redis Modules API in the form
+ * of commands showing how to accomplish common tasks.
+ *
+ * This module does not do anything useful, if not for a few commands. The
+ * examples are designed in order to show the API.
+ *
+ * -----------------------------------------------------------------------------
+ *
+ * Copyright (c) 2016, Salvatore Sanfilippo <antirez at gmail dot com>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ met:
+ *
+ *   * Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *   * Neither the name of Redis nor the names of its contributors may be
+ used
+ *     to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
+ IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "../../deps/kvdk/include/kvdk/engine.h"
+#include "../redismodule.h"
+#include <assert.h>
+#include <pthread.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <time.h>
+#include <unistd.h>
+
+#define PMEM_FILE_SIZE 256ULL << 30
+#define HASH_BUCKET_NUM 1 << 27
+#define PMEM_SEG_BLOCKS 2 * 1024 * 1024
+#define PMEM_BLOCK_SIZE 64
+#define HASH_BUCKET_SIZE 128
+#define NUM_BUCKETS_PER_SLOT 1
+#define POPULATE_PMEM_SPACE 1U
+
+const char *engine_path = "";
+KVDKEngine *engine;
+KVDKConfigs *config = NULL;
+
+static const char *enum_to_str[] = {FOREACH_ENUM(GENERATE_STRING)};
+RedisModuleDict *CollectionDict = NULL;
+
+int value_compare_func(const char *src_value, size_t src_val_len,
+                       const char *target_value, size_t target_val_len) {
+  REDISMODULE_NOT_USED(src_val_len);
+  REDISMODULE_NOT_USED(target_val_len);
+  double src_score = strtod(src_value, NULL);
+  double target_score = strtod(target_value, NULL);
+  if (src_score == target_score)
+    return 0;
+  else if (src_score < target_score)
+    return -1;
+  else
+    return 1;
+}
+
+int GetInt64Value(uint64_t *var, const char *value) {
+  if (strstr(value, "<<")) {
+    uint64_t left_val, right_val;
+    left_val = strtoull(strtok((char *)value, "<<"), NULL, 10);
+    right_val = strtoull(strtok(NULL, "<<"), NULL, 10);
+    *var = left_val << right_val;
+  } else if (strstr(value, ">>")) {
+    uint64_t left_val, right_val;
+    left_val = strtoull(strtok((char *)value, ">>"), NULL, 10);
+    right_val = strtoull(strtok(NULL, ">>"), NULL, 10);
+    *var = left_val >> right_val;
+  } else if (strstr(value, "*")) {
+    *var = 1;
+    char *p = strtok((char *)value, "*");
+    while (p) {
+      (*var) *= strtoull(p, NULL, 10);
+      p = strtok(NULL, "*");
+    }
+  } else {
+    *var = strtoull(value, NULL, 10);
+  }
+  return 1;
+}
+
+int GetInt32Value(uint32_t *var, const char *value) {
+  if (strstr(value, "<<")) {
+    uint32_t left_val, right_val;
+    left_val = (uint32_t)strtoul(strtok((char *)value, "<<"), NULL, 10);
+    right_val = (uint32_t)strtoul(strtok(NULL, "<<"), NULL, 10);
+    *var = left_val << right_val;
+  } else if (strstr(value, ">>")) {
+    uint32_t left_val, right_val;
+    left_val = (uint32_t)strtoul(strtok((char *)value, ">>"), NULL, 10);
+    right_val = (uint32_t)strtoul(strtok(NULL, ">>"), NULL, 10);
+    *var = left_val >> right_val;
+  } else if (strstr(value, "*")) {
+    *var = 1;
+    char *p = strtok((char *)value, "*");
+    while (p) {
+      (*var) *= (uint32_t)strtoul(p, NULL, 10);
+      p = strtok(NULL, "*");
+    }
+  } else {
+    *var = strtoull(value, NULL, 10);
+  }
+  return 1;
+}
+
+KVDKConfigs *LoadAndCreateConfigs(RedisModuleString **argv, int argc) {
+  uint64_t pmem_file_size = PMEM_FILE_SIZE, hash_bucket_num = HASH_BUCKET_NUM,
+           pmem_segment_blocks = PMEM_SEG_BLOCKS, max_write_threads;
+  uint32_t pmem_block_size = PMEM_BLOCK_SIZE,
+           hash_bucket_size = HASH_BUCKET_SIZE,
+           num_buckets_per_slot = NUM_BUCKETS_PER_SLOT;
+  unsigned char populate_pmem_space = POPULATE_PMEM_SPACE;
+  /* Log the list of parameters passing loading the module. */
+  for (int j = 0; j < argc; j += 2) {
+    const char *config_name = RedisModule_StringPtrLen(argv[j], NULL);
+    const char *config_value = RedisModule_StringPtrLen(argv[j + 1], NULL);
+    printf("Module loaded with ARG_NAME[%d] = %s, ARG_VALUE[%d] = %s\n", j,
+           config_name, j + 1, config_value);
+    if ((!strcmp(config_name, "pmem_file_size") &&
+         GetInt64Value(&pmem_file_size, config_value)) ||
+        (!strcmp(config_name, "pmem_segment_blocks") &&
+         GetInt64Value(&pmem_segment_blocks, config_value)) ||
+        (!strcmp(config_name, "hash_bucket_num") &&
+         GetInt64Value(&hash_bucket_num, config_value)) ||
+        (!strcmp(config_name, "max_write_threads") &&
+         GetInt64Value(&max_write_threads, config_value))) {
+      continue;
+    } else if (!strcmp(config_name, "populate_pmem_space")) {
+      populate_pmem_space = (unsigned char)atoi(config_value);
+    } else if ((!strcmp(config_name, "pmem_block_size") &&
+                GetInt32Value(&pmem_block_size, config_value)) ||
+               (!strcmp(config_name, "hash_bucket_size") &&
+                GetInt32Value(&hash_bucket_size, config_value)) ||
+               (!strcmp(config_name, "num_buckets_per_slot") &&
+                GetInt32Value(&num_buckets_per_slot, config_value))) {
+      continue;
+    } else if (!strcmp(config_name, "engine_path")) {
+      engine_path = config_value;
+    } else {
+      assert(0 && "Not support this config");
+    }
+  }
+
+  KVDKConfigs *kvdk_configs = KVDKCreateConfigs();
+  KVDKUserConfigs(kvdk_configs, max_write_threads, pmem_file_size,
+                  populate_pmem_space, pmem_block_size, pmem_segment_blocks,
+                  hash_bucket_size, hash_bucket_num, num_buckets_per_slot);
+  return kvdk_configs;
+}
+
+int InitEngine(RedisModuleString **argv, int argc) {
+  config = LoadAndCreateConfigs(argv, argc);
+  if (config == NULL) {
+    return REDISMODULE_ERR;
+  }
+  if ((engine_path != NULL && engine_path[0] == '\0')) {
+    return REDISMODULE_ERR;
+  }
+
+  // Purge old KVDK instance
+  KVDKRemovePMemContents(engine_path);
+
+  // open engine
+  KVDKStatus s = KVDKOpen(engine_path, config, stdout, &engine);
+  if (s != Ok) {
+    return REDISMODULE_ERR;
+  }
+
+  // register compare function
+  KVDKRegisterCompFunc(engine, "zset_val_compare", strlen("zset_val_compare"),
+                       value_compare_func);
+
+  return REDISMODULE_OK;
+}
+
+int KVDKSet_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                         int argc) {
+  if (argc != 3)
+    return RedisModule_WrongArity(ctx);
+  size_t key_len;
+  const char *key_str = RedisModule_StringPtrLen(argv[1], &key_len);
+  size_t val_len;
+  const char *val_str = RedisModule_StringPtrLen(argv[2], &val_len);
+
+  KVDKStatus s = KVDKPut(engine, key_str, key_len, val_str, val_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKGet_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                         int argc) {
+  if (argc != 2)
+    return RedisModule_WrongArity(ctx);
+  size_t key_len;
+  const char *key_str = RedisModule_StringPtrLen(argv[1], &key_len);
+  size_t val_len;
+  char *val_str;
+  KVDKStatus s = KVDKGet(engine, key_str, key_len, &val_len, &val_str);
+  if (s != Ok && s != NotFound) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithStringBuffer(ctx, val_str, val_len);
+}
+
+int KVDKDelete_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                            int argc) {
+  if (argc != 2)
+    return RedisModule_WrongArity(ctx);
+  size_t key_len;
+  const char *key_str = RedisModule_StringPtrLen(argv[1], &key_len);
+
+  KVDKStatus s = KVDKDelete(engine, key_str, key_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKHSet_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                          int argc) {
+  if (argc != 4)
+    return RedisModule_WrongArity(ctx);
+  size_t collection_len, key_len, val_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+  const char *key_str = RedisModule_StringPtrLen(argv[2], &key_len);
+  const char *val_str = RedisModule_StringPtrLen(argv[3], &val_len);
+
+  KVDKStatus s = KVDKHashPut(engine, collection_str, collection_len, key_str,
+                             key_len, val_str, val_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKHGet_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                          int argc) {
+  if (argc != 3)
+    return RedisModule_WrongArity(ctx);
+  size_t collection_len, key_len, val_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+  const char *key_str = RedisModule_StringPtrLen(argv[2], &key_len);
+  char *val_str;
+  KVDKStatus s = KVDKHashGet(engine, collection_str, collection_len, key_str,
+                             key_len, &val_len, &val_str);
+  if (s != Ok && s != NotFound) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithStringBuffer(ctx, val_str, val_len);
+  ;
+}
+
+int KVDKHDelete_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                             int argc) {
+  if (argc != 3)
+    return RedisModule_WrongArity(ctx);
+  size_t collection_len, key_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+  const char *key_str = RedisModule_StringPtrLen(argv[2], &key_len);
+
+  KVDKStatus s =
+      KVDKHashDelete(engine, collection_str, collection_len, key_str, key_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKSAdd_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                          int argc) {
+  if (argc != 3)
+    return RedisModule_WrongArity(ctx);
+  size_t set_len, key_len;
+  const char *set_str = RedisModule_StringPtrLen(argv[1], &set_len);
+  const char *key_str = RedisModule_StringPtrLen(argv[2], &key_len);
+
+  KVDKStatus s = KVDKHashPut(engine, set_str, set_len, key_str, key_len, "", 0);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKSRemove_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                             int argc) {
+  if (argc != 3)
+    return RedisModule_WrongArity(ctx);
+  size_t set_len, key_len;
+  const char *set_str = RedisModule_StringPtrLen(argv[1], &set_len);
+  const char *key_str = RedisModule_StringPtrLen(argv[2], &key_len);
+
+  KVDKStatus s = KVDKHashDelete(engine, set_str, set_len, key_str, key_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKZAdd_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                          int argc) {
+  if (argc != 4)
+    return RedisModule_WrongArity(ctx);
+
+  KVDKStatus s;
+  size_t collection_len, key_len, val_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+  const char *key_str = RedisModule_StringPtrLen(argv[3], &key_len);
+  const char *val_str = RedisModule_StringPtrLen(argv[2], &val_len);
+
+  // create SortedCollection.
+  int no_key = 0;
+  const char *cmp_name = "zset_val_compare";
+  RedisModule_DictGet(CollectionDict, argv[1], &no_key);
+
+  if (no_key) {
+    KVDKCollection *collection_ptr;
+    s = KVDKSortedCreate(engine, &collection_ptr, collection_str,
+                                   collection_len, cmp_name, strlen(cmp_name),
+                                   VALUE);
+    if (s != Ok) {
+      return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+    }
+    RedisModule_DictSet(CollectionDict, argv[1], collection_ptr);
+  }
+
+  s = KVDKSortedPut(engine, collection_str, collection_len, key_str, key_len,
+                    val_str, val_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKLPUSH_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                           int argc) {
+  if (argc != 3)
+    return RedisModule_WrongArity(ctx);
+  size_t collection_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+  size_t key_len;
+  const char *key_str = RedisModule_StringPtrLen(argv[2], &key_len);
+
+  KVDKStatus s =
+      KVDKLPush(engine, collection_str, collection_len, key_str, key_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKLPOP_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                          int argc) {
+  if (argc != 2)
+    return RedisModule_WrongArity(ctx);
+  size_t collection_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+
+  char *key_str;
+  size_t key_len;
+  KVDKStatus s =
+      KVDKLPop(engine, collection_str, collection_len, &key_str, &key_len);
+  if (s != Ok && s != NotFound) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithStringBuffer(ctx, key_str, key_len);
+}
+
+int KVDKRPUSH_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                           int argc) {
+  if (argc != 3)
+    return RedisModule_WrongArity(ctx);
+  size_t collection_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+  size_t key_len;
+  const char *key_str = RedisModule_StringPtrLen(argv[2], &key_len);
+
+  KVDKStatus s =
+      KVDKRPush(engine, collection_str, collection_len, key_str, key_len);
+  if (s != Ok) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithLongLong(ctx, 1);
+}
+
+int KVDKRPOP_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
+                          int argc) {
+  if (argc != 2)
+    return RedisModule_WrongArity(ctx);
+  size_t collection_len;
+  const char *collection_str =
+      RedisModule_StringPtrLen(argv[1], &collection_len);
+  char *key_str;
+  size_t key_len;
+  KVDKStatus s =
+      KVDKRPop(engine, collection_str, collection_len, &key_str, &key_len);
+  if (s != Ok && s != NotFound) {
+    return RedisModule_ReplyWithError(ctx, enum_to_str[s]);
+  }
+  return RedisModule_ReplyWithStringBuffer(ctx, key_str, key_len);
+}
+
+int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv,
+                       int argc) {
+  // must have `max_write_threads` and `engine_path`
+  if (argc % 2 != 0 && (argc / 2) < 2 && (argc / 2) > 10) {
+    return RedisModule_WrongArity(ctx);
+  }
+  if (RedisModule_Init(ctx, "kvdk", 1, REDISMODULE_APIVER_1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+
+  if (InitEngine(argv, argc) == REDISMODULE_ERR) {
+    return REDISMODULE_ERR;
+  }
+  CollectionDict = RedisModule_CreateDict(ctx);
+
+  // ========================== string ============================
+  if (RedisModule_CreateCommand(ctx, "kvdk.set", KVDKSet_RedisCommand, "write",
+                                1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.get", KVDKGet_RedisCommand,
+                                "readonly", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.delete", KVDKDelete_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+
+  // ========================== hash ================================
+  if (RedisModule_CreateCommand(ctx, "kvdk.hset", KVDKHSet_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.hget", KVDKHGet_RedisCommand,
+                                "readonly", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.hdelete", KVDKHDelete_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+
+  // ========================== set ==================================
+  if (RedisModule_CreateCommand(ctx, "kvdk.sadd", KVDKSAdd_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.srem", KVDKSRemove_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+
+  // ========================== skiplist ==================================
+  if (RedisModule_CreateCommand(ctx, "kvdk.zadd", KVDKZAdd_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+
+  // ========================== lists ==================================
+  if (RedisModule_CreateCommand(ctx, "kvdk.lpush", KVDKLPUSH_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.lpop", KVDKLPOP_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.rpush", KVDKRPUSH_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  if (RedisModule_CreateCommand(ctx, "kvdk.rpop", KVDKRPOP_RedisCommand,
+                                "write", 1, 1, 1) == REDISMODULE_ERR)
+    return REDISMODULE_ERR;
+  return REDISMODULE_OK;
+}
+
+int RedisModule_OnUnload(RedisModuleCtx *ctx) {
+  RedisModule_FreeDict(ctx, CollectionDict);
+  KVDKConfigsDestory(config);
+  KVDKCloseEngine(engine);
+  return REDISMODULE_OK;
+}
diff --git a/src/networking.c b/src/networking.c
index bf4a8daa0..0247b8968 100644
--- a/src/networking.c
+++ b/src/networking.c
@@ -2131,10 +2131,13 @@ void processInputBuffer(client *c) {
             /* If we are in the context of an I/O thread, we can't really
              * execute the command here. All we can do is to flag the client
              * as one that needs to process the command. */
+            #ifdef USE_KVDK
+            #else
             if (c->flags & CLIENT_PENDING_READ) {
                 c->flags |= CLIENT_PENDING_COMMAND;
                 break;
             }
+            #endif
 
             /* We are finally ready to execute the command. */
             if (processCommandAndResetClient(c) == C_ERR) {
diff --git a/src/redis-benchmark.c b/src/redis-benchmark.c
index 8d510d7da..89ec340dc 100644
--- a/src/redis-benchmark.c
+++ b/src/redis-benchmark.c
@@ -1847,13 +1847,13 @@ int main(int argc, const char **argv) {
         }
 
         if (test_is_selected("set")) {
-            len = redisFormatCommand(&cmd,"SET key%s:__rand_int__ %s",tag,data);
+            len = redisFormatCommand(&cmd,"kvdk.set key%s:__rand_int__ %s",tag,data);
             benchmark("SET",cmd,len);
             free(cmd);
         }
 
         if (test_is_selected("get")) {
-            len = redisFormatCommand(&cmd,"GET key%s:__rand_int__",tag);
+            len = redisFormatCommand(&cmd,"kvdk.get key%s:__rand_int__",tag);
             benchmark("GET",cmd,len);
             free(cmd);
         }
@@ -1865,39 +1865,39 @@ int main(int argc, const char **argv) {
         }
 
         if (test_is_selected("lpush")) {
-            len = redisFormatCommand(&cmd,"LPUSH mylist%s %s",tag,data);
+            len = redisFormatCommand(&cmd,"kvdk.lpush mylist%s %s",tag,data);
             benchmark("LPUSH",cmd,len);
             free(cmd);
         }
 
         if (test_is_selected("rpush")) {
-            len = redisFormatCommand(&cmd,"RPUSH mylist%s %s",tag,data);
+            len = redisFormatCommand(&cmd,"kvdk.rpush mylist%s %s",tag,data);
             benchmark("RPUSH",cmd,len);
             free(cmd);
         }
 
         if (test_is_selected("lpop")) {
-            len = redisFormatCommand(&cmd,"LPOP mylist%s",tag);
+            len = redisFormatCommand(&cmd,"kvdk.lpop mylist%s",tag);
             benchmark("LPOP",cmd,len);
             free(cmd);
         }
 
         if (test_is_selected("rpop")) {
-            len = redisFormatCommand(&cmd,"RPOP mylist%s",tag);
+            len = redisFormatCommand(&cmd,"kvdk.rpop mylist%s",tag);
             benchmark("RPOP",cmd,len);
             free(cmd);
         }
 
         if (test_is_selected("sadd")) {
             len = redisFormatCommand(&cmd,
-                "SADD myset%s element:__rand_int__",tag);
+                "kvdk.sadd myset%s element:__rand_int__",tag);
             benchmark("SADD",cmd,len);
             free(cmd);
         }
 
         if (test_is_selected("hset")) {
             len = redisFormatCommand(&cmd,
-                "HSET myhash%s element:__rand_int__ %s",tag,data);
+                "kvdk.hset myhash%s element:__rand_int__ %s",tag,data);
             benchmark("HSET",cmd,len);
             free(cmd);
         }
@@ -1912,7 +1912,7 @@ int main(int argc, const char **argv) {
             char *score = "0";
             if (config.randomkeys) score = "__rand_int__";
             len = redisFormatCommand(&cmd,
-                "ZADD myzset%s %s element:__rand_int__",tag,score);
+                "kvdk.zadd myzset%s %s element:__rand_int__",tag,score);
             benchmark("ZADD",cmd,len);
             free(cmd);
         }
-- 
2.17.1

