#include <random>
#include <algorithm>
#include <vector>
#include <iostream>
#include <map>
#include "../engine/pmem_allocator.hpp"

int main()
{
	std::default_random_engine re;
	// Mean value of variable generated by gamma distribution is alpha * beta
	// alpha is shape parameter and beta is scale parameter.
	// For alpha = 1, gamma distribution becomes exponential distribution.
	std::gamma_distribution<> dist{ 4,256 };
	std::vector<uint64_t> vec_sz;
	std::uint64_t sz_sum = 0;
	while (sz_sum < (1ull << 32))	// Allocate 4GB
	{
		uint64_t sz = static_cast<uint64_t>(dist(re));
		sz_sum += sz;
		vec_sz.push_back(sz);
	}
	// Print the histogram
	if (false)
	{
		std::vector<int> histogram(20);
		std::vector<uint64_t> large;
		size_t width = 256;
		for (auto sz : vec_sz)
		{
			size_t i = sz / width;
			if (i >= histogram.size())
				large.push_back(sz);
			else
				++histogram[i];
		}
		std::sort(large.begin(), large.end());
		for (size_t i = 0; i < histogram.size(); i++)
		{
			std::cout 
			<< i*width << "-" << (i+1)*width << "\t" 
			<< histogram[i] << std::endl;
		}
		for (auto sz : large)
			std::cout << sz << std::endl;
	}
	

	return 0;
}